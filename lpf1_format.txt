# #  comment
# {} collection
# : entry begin
# , entry continue with newline
# ; entry continue with escaped newline 

# we have collections denoted by {} symbols
# each collection is ordered. 
# some entries may have names
# some entries may have type

# how do we do types without names?

    
material {
    #THIS IS NICE!
    name n:       Wood_Base
    reosultion i: 1024
    albedo 3f:    1 1 1
    roughness f:  0.59
    metallic f:   0
    ao f:         0
    emissive f:   0
    mra 3f:       0 0 0

    shader_data SHADER_DATA {
        :IOjzUyMpOQioxUzqPHg#
        ;PxiopUUyozhYTYqnz#
    }
}

material {

    #this is a comment for the name
    name n          :Wood_Base  #short comments
    #tis is a comment for value
    value f         :10         #here also!
    texture TEX { 
                #this is a comment for the texture
                #


    }
}

material {
    name:       Wood
    reosultion: 1024
    albedo:     1 1 1
    roughness:  0.59
    metallic:   0
    ao:         0
    emissive:   0
    mra:        0 0 0

    albedo_map TEX { 
        path   s: images/wood_albedo.bmp
        tile   b: false
        gamma  f: 2.2
        gain   f: 1
        bias   f: 0
        offset 3f: 0 0 0
        scale  3f: 1 1 1 
    }
    
    roughness_map TEX { 
        path   s: images/wood_roughness.bmp
    }


}


#didnt produce any too longs => okay
matrix 16f  :1 0 0 0 
            ,0 1 0 0
            ,0 0 1 0
            ,0 0 0 1
            
# "hello\nworld\n this is a string\"
# ->

what options do we have:
    1) whitespace sensitive => comment terminate always                          - ALWAYS
    2) mixed                => comment terminate if newline 
    4) whitespace agnostic  => dont comment terminate unless split artificially  - NEVER
    3) postfix whitespace agnostic => trim and allow spaced comments

// WHITESPACE_SENSITIVE
// WHITESPACE_PREFIX_AGNOSTIC
// WHITESPACE_POSTFIX_AGNOSTIC
// NEWLINE_AGNOSTIC

// -> int: whitespace agnostic - NEWLINE_AGNOSTIC 
// -> string: post/prefix agnostic - WHITESPACE_PREFIX_AGNOSTIC | WHITESPACE_POSTFIX_AGNOSTIC
// -> raw: whitespace sensitive - NEVER

string s    :hello#
            :world#
            :this is a string#


matrix 16f  :1 0 0 0 
            ,0 1 0 0
            ,0 0 1 0
            ,0 0 0 1

material {
    name       :Wood
    reosultion :1024
    albedo     :1 1 1
    roughness  :0.59
    metallic   :0
    ao         :0
    emissive   :0
    mra        :0 0 0

    # this is a long comment
    # with multiple lines
    albedo_map TEX { #comment
        path s      :images/wood_albedo.bmp
        tile b      :false
        gamma f     :2.2
        gain f      :1
        bias f      :0
        offset 3f   :0 0 0 #big value
        scale 3f    :1 1 1 
    }
    
    roughness_map TEX { 
        path s  :images/wood_roughness.bmp
    }
}


s: String entry  
#single C langauge (and most other langauges) id containing no whitespace.
n:my_name 
u:512    
i:-1024      
f:13.2
b:true
b:false
b:1
b:0
c:g

any:Any entry
null:ignored
